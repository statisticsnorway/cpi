{Application 'GETPRICES' logic file generated by CSPro}
PROC GLOBAL

	numeric vsetMax = 100;
	string mistofolderNamesFile = "../Lookup/mistoNames.txt";	//Names of the folders containing files
	string locationFileName = "../Lookup/regions.csv";
	string folderName = "Data/";
	string uploadFolderName = "UploadToServer/";
	string theOblast, theMisto, theMistoName;
	string login;
	array string uploadFileNames(8);	//To hold the names of the 8 files to upload
	

//NB: The order of the file is of importance when counting number of tabstops
function setFileNames(string period)
		uploadFileNames(1) = "BLTA_" + period + ".txt";
		uploadFileNames(2) = "BLTB_" + period + ".txt";
		uploadFileNames(3) = "BLTm_" + period + ".txt";
		uploadFileNames(4) = "BLTBm_" + period + ".txt";
		uploadFileNames(5) = "d_reestr_" + period + ".txt";
		uploadFileNames(6) = "d_rinok_" + period + ".txt";
		uploadFileNames(7) = "d_shop_" + period + ".txt";
		uploadFileNames(8) = "d_perexid_" + period + ".txt";
end;


function string filesExist(string period)
	filesExist = "";
	numeric ctr = 1;

	while ctr <= uploadFileNames.length() do
		if fileexist(uploadFolderName + uploadFileNames(ctr)) = 0 then
			filesExist = uploadFolderName + uploadFileNames(ctr);			
			break;	//No need to continue. The current file is missing
		endif;
		inc(ctr);
	enddo;
end;



//Function to check if the BLT files have the right amount of tabstops
//Return value: Line number of error (if found), 0 otherwise
function checkTabs(numOfTabs, string checkFileName)
	file cfFile;
	numeric fileOk = 0;
	numeric ok = setFile(cfFile, checkFileName);
	if not ok then
		errmsg(tr(20), checkFileName, "CPI/admin/UploadToServer/");
		checkTabs = 0;
	else
		string aLine;
		numeric ctr = 0; //Counting tabstops as we find then
		numeric linectr = 0; //Keeping track of line - to point to the error
		fileOk = 0;	//Assuming right number of tabs
		while ok do
			ok = fileRead(cfFile, aLine);
			inc(linectr);
			
			//Make a regex check if there is a tab within quoted text. If so: Allow one more tab
			//if regexmatch(aLine, "\".*\t.*\"") then
				//errmsg("%s", aLine);
				//inc(numOfTabs);
			//endif;
			
			string tmp = aLine;
			numeric thePos = pos("	", aLine);			
			while thepos > 0 do
				inc(ctr);
				aLine = aLine[thePos+1];
				thePos = pos("	", aLine);
			enddo;
			if ctr > numOfTabs then				
				fileOk = linectr;
				break;
			endif;
			
			ctr = 0;
		enddo;		
	endif;
	close(cfFile);
	checkTabs = fileOK;
end;


//function to strip leading spaces (the original strip function only strips trailing spaces)
function string lstrip(string theString)
	numeric aPos = pos(" ", theString);
	while aPos = 1 do
		//leading space
		theString = theString[2];
		aPos = pos(" ", theString);
	enddo;
	lstrip = theString;
end;
	
	

//stripping both ends
function string bstrip (string theString)
	bstrip = lstrip(strip(theString));
end;



//This only syncs the data files. Syncing the app is done in the CSEntry menu system
function upLoadFiles()

	if syncconnect(CSWeb, "http://csweb.ukrstat.gov.ua/csweb/api") = 1 then	
		
		string tmpMistoName = replace(theMistoName,  " ", "_");
		tmpMistoName = replace(tmpMistoName,  " ", "_");
			
		string serverPath = "/CPI/Lookup/" + edit("99999",visualValue(MISTO)) + "_" + bstrip(tmpMistoName) + "/";
			
		//errmsg("Path: %s", serverPath);
			
		string aDate = edit("99999999", dateadd(sysdate("YYYYMMDD"), -1, "m"));
		string MMYY = aDate[5:2] + aDate[3:2];
		
		numeric ctr = 1;
		numeric syncRes;
		while ctr <= uploadFileNames.length() do
			syncRes = syncFile(PUT, uploadFolderName + uploadFileNames(ctr), serverPath + uploadFileNames(ctr));		
			inc(ctr);
		enddo;
	
		syncdisconnect();
	else
		errmsg(tr(101));
	endif;
end;



function callPff(string theMonth, string theYear)
	string filecontent = "[Run Information]\n";
	filecontent = filecontent + "Version=CSPro 7.5\n";
	filecontent = filecontent + "AppType=Batch\n\n";

	filecontent = filecontent + "[Files]\n";
	filecontent = filecontent + "Application=.\exportDataToCsv.bch\n";
	filecontent = filecontent + "InputData=.\cpi_dict.csdb\n";
	filecontent = filecontent + "OutputData=|type=None\n";
	filecontent = filecontent + "Listing=.\Junk\exportDataToCsv.lst\n\n";

	filecontent = filecontent + "[UserFiles]\n";
	filecontent = filecontent + "bltHandler=\n\n";

	filecontent = filecontent + "[Parameters]\n";
	filecontent = filecontent + "ViewListing=Never\n";
	filecontent = filecontent + "ViewResults=No\n";
	filecontent = filecontent + "ListingWidth=120\n";
	filecontent = filecontent + "MessageWrap=No\n";
	filecontent = filecontent + "ErrmsgOverride=No\n";
	filecontent = filecontent + "InputOrder=Sequential\n";
	filecontent = filecontent + "MISTO=" + edit("ZZZZZ", MISTO)[3:3] + "\n";
	filecontent = filecontent + "OBLAST=" + edit("ZZ", OBLAST)  + "\n";
	filecontent = filecontent + "MONTH=" + theMonth  + "\n";
	filecontent = filecontent + "YEAR =" + theYear  + "\n";
	//filecontent = filecontent + "OnExit=admin.pff\n"; //Only needed for android devices, and this is a desktop app
	
	file pffFile;
	numeric ok = setFile(pffFile, "exportDataToCsv.pff");
	ok = filewrite(pffFile, filecontent);
	close(pffFile);
end;


function string changePw()
	string first, second;
	first = prompt(tr(31), password);
	second = prompt(tr(32), password);
	while first <> second do
		errmsg(tr(35));
		first = prompt(tr(31), password);
		second = prompt(tr(32), password);
	enddo;
	
	savesetting(login, first);
	changePw = first;
end;


function doLogin()
	//For now: Assuming login is "CPI_" + code for misto and password not set first time
	while login[1:4] <> "CPI_" do
		login = prompt(tr(30));
		if length(login) <> 9 then
			errmsg(tr(38));
		endif;
	enddo;
	
	string pwStored = loadSetting(login);
	string pwEntered;

	if pwStored = "" then	//First time log in. 
		pwStored = changePw();
	else
		while pwStored <> pwEntered do
			pwEntered = prompt(tr(33), password);
		enddo;
	endif;
end;
	

PROC GETPRICES_FF

PROC GETPRICES_LEVEL

PROC GETPRICES_LEVEL_FORM
preproc
	//Debugging only. Comment away when in production
	//savesetting("oblast", "");	
	//savesetting("misto", "");
	//savesetting("CPI_80000", "");
	//savesetting("CPI_46101", "");
	//savesetting("CPI_admin", "");
			
	theOblast = loadSetting("oblast");
	theMisto  = loadSetting("misto");
	theMistoName = loadSetting("mistoName");
	string test = '"inneholder en	tab"';
	string match = '".*\t.*"';
	match = '(^|\t)"[^"]*\t[^"]*"(\t|$)'; //(^|\t) <- start eller tab
										  //[^"]*  kor mange som helst av kva som helst anna enn ein "

	if regexmatch(test, match) then
	//	errmsg("Virker");
	endif;
	doLogin();
	
	//Check if login matches the misto code
	if (theOblast = "" or theMisto = "") and login <> "CPI_admin" then
		theOblast = login[5:2];
		theMisto = login[7:3];
	elseif login[5:5] <> theMisto and login <> "CPI_admin" then
		errmsg(tr(34));
		login = "";
		doLogin();
		//First field is oblast, so just continue to reenter
	endif;
		
	
	
	

PROC OBLAST
preproc
	//Only ask for oblast if admin is logged in. Otherwise get it from the login string
	if login <> "CPI_admin" then
		$ = toNumber(login[5:2]);
		noInput;
	else
	
		valueset oblastVs;
	
		file lfFile;
		numeric ok = setfile(lfFile, locationFileName);
		if not ok then
			errmsg(tr(104), locationFileName);
			stop(1);
	
		else
			numeric i = 0;
		while ok do
				string aLine;	
				ok = fileread(lfFile, aLine);
			
				if ok then
					//Reading state ID number and state name respectively and put it in arrays to use in value sets
					numeric posX = pos("	", aLine);
					if posX = 3 then
						//This is a oblast, not a misto, hence I'll put it in the arrays
						oblastVs.add(aLine[posX+1], toNumber(aLine[1:posX-1]));
						inc(i);
					endif;
				endif;
			enddo;
		
			close(lfFile);
			//adding the "edit 3 digist coicop for admin
			if login = "CPI_admin" then
				oblastVs.add(maketext(tr(42)), 99);
			endif;
		
			setValueset($, oblastVs);
		endif;
	endif;


postproc 
	
	if login = "CPI_admin" and $ = 99 then	//Admin chose to change the basket
	//Dealing with making a new 3-lvl coicop file. First a warning 8only to be used once every 5th year
		string answer = prompt(tr(40));
		if answer = "y" or answer = "Y" then
			errmsg(tr(41));
			execpff("Coicop_lvl3_edit.pff", wait);
		endif;
	
		$ = NOTAPPL;
		reenter;
	else
		theOblast = edit("99", $);
		savesetting("oblast", theOblast);			
	endif;
	
	
	


PROC MISTO
preproc
	//Only ask for misto if admin is logged in. Otherwise get it from the login string
	if login <> "CPI_admin" then
		$ = toNumber(login[5:5]);
		noInput;
	else
		if OBLAST = 80 then
			$ = 80000;
			noinput;
		else
			valueset mistoVs;
	
			file lfFile;
			numeric ok = setfile(lfFile, locationFileName);
			if not ok then
				errmsg(tr(104), locationFileName);
				stop(1);
		
			else
				numeric i = 0;
			while ok do
					string aLine;	
					ok = fileread(lfFile, aLine);
				
					if ok then
						//Reading state ID number and state name respectively and put it in arrays to use in value sets
						numeric posX = pos("	", aLine);
						
						if posX = 6 and toNumber(aLine[1:2]) = OBLAST then
							//This is a misto in the right oblast
							//errmsg("trying to add: %s, %d", aLine[posX+1], toNumber(aLine[1:posX-1]));
							mistoVs.add(aLine[posX+1], toNumber(aLine[1:posX-1]));
							inc(i);
						endif;
					endif;
				enddo;
		
				close(lfFile);
			
				setValueset($, mistoVs);
			endif;
		endif;
	endif;




postproc 
	if $ = 80000 then
		theMistoName = "м_Київ";
	else
		theMisto = edit("ZZZZZ", $);
		file aFile;
		numeric ok = setfile(aFile, mistofolderNamesFile);
		//string searchTerm = theOblast + theMisto;
	
		string aLine;
		ok = fileRead(aFile, aLine);
		while ok do
			if aLine[1:5] = theMisto then
				theMistoName =aLine[7];			
				break;
			endif;
			ok = fileRead(aFile, aLine);
		enddo;
		close(aFile);
	endif;
	MISTONAME = theMistoName;
	
	savesetting("misto", theMisto);
	saveSetting("mistoName", theMistoName);
	

PROC MENU

postproc	
	
	if $ = 9 then
		stop(1);
	endif;
		
	if theOblast = "" or (theOblast <> "80" and theMisto = "") then
		theOblast = prompt(maketext(tr(10)), numeric);
		if theOblast <> "80" then
			theMisto = prompt(makeText(tr(11)), numeric);
		endif;
				
	endif;
	
	//numeric MM, YYYY;

	if $ = 1 then		//get prices for last month
		MONTH = sysdate("MM") - 1;
		YEAR = sysdate("YYYY");
		if MONTH = 0 then
			MONTH = 12;
			YEAR = sysdate("YYYY") -1;
		endif;

		
		//get the newest version of the data from the server..
		pff thePff;
		thePff.load("cpi_dict.pff");
		thePff.setProperty("Silent", "Yes");
		thePff.exec();

		//And run the batch. Doing it the oldfashioned way, as properties heap up otherwise.. (Weird stuff)
		callPff(edit("99", visualValue(MONTH)), edit("9999", visualValue(YEAR)));
		numeric ok = execpff("exportDataToCsv.pff");
		errmsg(tr(15));
		$ = NOTAPPL;
		reenter;
	elseif $ = 2 then	//Get prices from different month
		//need to just proceed to pick up month and year
	elseif $ = 3 then	//upload files. Defaults to last month
	
		string theMonth, theYear;
		if sysdate("MM") = 1 then
			theMonth = "12";
			theYear = edit("99", sysdate("YY") - 1);
		else
			theMonth = edit("99", sysdate("MM") - 1);
			theYear = edit("99", sysdate("YY"));
		endif;
		
		//setting the file names
		setFileNames(theMonth + theYear);
		
		//Cheking if the files are there		
		string ok = filesExist(theMonth + theYear);
		if ok <> "" then
			errmsg(tr(20), ok, uploadFolderName);
			reenter;
		endif;
	
		
		//Checking if the files all have the right number of tabstops in them
		//First 2 files should have 14 tabstops, next 2 should have 13. The rest we don't check
		numeric errorLineNo = 0;
		numeric ctr = 1;
		while ctr <= 4 do
			if ctr <=2 then
				errorLineNo = checkTabs(14,uploadFolderName + uploadFileNames(ctr));
			else 
				errorLineNo = checkTabs(13,uploadFolderName + uploadFileNames(ctr));
			endif;
			
			if errorLineNo > 0 then	//File does not have thed right format
				errmsg(tr(21), uploadFolderName + uploadFileNames(ctr), errorLineNo);
				break;	//No need to continue. Found error in the file
			endif;
			inc(ctr);
		enddo;
		if errorLineNo <> 0 then	//Not continuing until files are fixed
			$ = NOTAPPL;
			reenter;
		endif;
		
		execsystem("explorer encodingcheck.jpg", wait, maximized);
		errmsg(tr(39));
		upLoadFiles();
		reenter;
	elseif $ = 4 then	//Change password
		string currPw = prompt(tr(33), Password);
		if currPw <> loadSetting(login) then
			errmsg(tr(37));
		else
			changePw();
			errmsg(tr(36));
		endif;
		$ = NOTAPPL;
		reenter;	
	endif;
	
	
	
PROC MONTH
preproc
	array monthCodes(13) = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, NOTAPPL;
	array string monthNames(13) = "Січень", "Лютий", "Березень", "Квітень", 
							"Травень", "Червень", "Липень", "Серпень", 
							"Вересень", "Жовтень", "Листопад", "Грудень", "";
	
	setValueset($, monthCodes, monthNames);
	
PROC YEAR
preproc
	numeric currYear = sysdate("YYYY");
	array yearCodes(5) = curryear-3, curryear-2, curryear-1, curryear, NOTAPPL;
	array string yearNames(5) = edit("9999", curryear-3), edit("9999", curryear-2), 
					edit("9999", currYear-1), edit("9999", currYear), "";
	
	setValueset($, yearCodes, yearNames);
	
	
	
postproc
	if $ > sysdate("YYYY") or ($ = sysdate("YYYY") and MONTH > sysdate("MM")) then
		errmsg(tr(14));
		$ = NOTAPPL;
		reenter MONTH;
	endif;
		
	//get the newest version of the data from the server..
		pff thePff;
		thePff.load("cpi_dict.pff");
		thePff.setProperty("Silent", "Yes");
		thePff.exec();
	
	//And run the batch. Doing it the oldfashioned way, as properties heap up otherwise.. (Weird stuff)
	callPff(edit("99",MONTH), edit("9999", YEAR));
	numeric ok = execpff("exportDataToCsv.pff");
	//filedelete("cpi_dict.csdb");
	
	errmsg(tr(15));
	
	$ = NOTAPPL;
	reenter MENU;
	
	
