{Application 'MENU' logic file generated by CSPro}
PROC GLOBAL

//ABOUT THE EXTERNAL DICTIONARIES:
//CPI_DICT and PRODUCTS_DICT are just included for synchronizing
//BLT_DICT: This is for initiating the csdb file(s) for current month


//*************************** Declarations **********************************************

	string locationFileName = "../Lookup/regions.csv";	//Oblast and Misto. Common for all regions
	string enumeratorFileName;	//Price collector and shops of which he is responsible for	
	string enumeratorProductsFileName;	//the products the price collector is responsible for. d_perexid.
										//also for monitoring survey
	string bltaFile, bltbFile, bltmaFile, bltmbFile;	//Prices last month from shops, markets, 
												//monitoring-shops, monitoring markets respectively
	string productsDb;	//Prices last month
	string lvl3CoicopFile;	//3 level coicop for main survey
	string monitorProdsFile;	//product numbers and descriptions for monitoring survey
	string shopsFileName, markedsFileName;
	
	numeric vsetMax = 350;		//Maximum number of items in dropdown boxes..
	
	//Some global variables are just nice to have.
	numeric lastMonth;
	numeric lastMonthsYear;
	string currPeriod, prevPeriod;
	string theMisto, theOblast;
	string theEnumerator;
	string theMistoName;
	
	array string Lvl3Coicop(90,4);
	array string prodMonitor(200,2);
	
	string pffFile = "../CPI_app/CPI.pff";



//*************************** Functions  **********************************************
	//function to strip leading spaces (the original strip function only strips trailing spaces)
	function string lstrip(string theString)
		numeric aPos = pos(" ", theString);
		while aPos = 1 do
			//leading space
			theString = theString[2];
			aPos = pos(" ", theString);
		enddo;
		lstrip = theString;
	end;

	//stripping both ends
	function string bstrip (string theString)
		bstrip = lstrip(strip(theString));
	end;
	
	

	//As most file names have month and year as a part of their name, and the folder name is dependent
	//on the misto, this function sets all the file names correctly
	function getFileNames()
	
		lvl3CoicopFile = "../Lookup/prodNumber_Coicop3.txt";	
		monitorProdsFile = "../Lookup/prodNumber_Monitor.txt";	
		
		if visualValue(M_MISTO_NO) = NOTAPPL then
			theMisto = strip(loadsetting("Misto"));
			theMistoName = strip(loadSetting("MistoName"));
		else	
			theMisto = edit("99999", visualValue(M_MISTO_NO));
			theMistoName = bstrip(M_MISTO_NAME);			
		endif;
		//errmsg("theMisto: %s, thename: %s", theMisto, theMistoName);
		
		//folder names on the server - example: 46101_м_Львів. Need replace function twice because some mistos has two words for name
		string tmpMistoName = replace(theMistoName,  " ", "_");
		tmpMistoName = replace(tmpMistoName,  " ", "_");
		string folderName = "../Lookup/" + theMisto + "_" + tmpMistoName + "/";
		
		enumeratorFileName = folderName + "d_reestr_" + prevPeriod + ".txt";		
		bltaFile = folderName + "BLTA_" + prevPeriod + ".txt";		
		bltbFile = folderName + "BLTB_" + prevPeriod + ".txt";	
		bltmaFile = folderName + "BLTm_" + prevPeriod + ".txt";		
		bltmbFile = folderName + "BLTBm_" + prevPeriod + ".txt";	 	

		productsDb = folderName + "products.csdb";
		
		shopsFileName = folderName + "d_shop_" + prevPeriod + ".txt";
		markedsFileName = folderName + "d_rinok_" + prevPeriod + ".txt";
		enumeratorProductsFileName = folderName + "d_perexid_" + prevPeriod + ".txt";
	end;
	
	
	//Delete files from previous month
	function deleteFiles()
		//Only happens if "new period" is chosen, hence Misto and oblast has been entered, so it will work
		string tmpMistoName = replace(M_MISTO_NAME,  " ", "_");
		tmpMistoName = replace(tmpMistoName,  " ", "_");
		
		string folderName = "../Lookup/" + edit("9999", visualValue(M_MISTO_NO)) + "_" + tmpMistoName + "/";
		string delPeriod =  edit("99999999", dateadd(sysdate("YYYYMMDD"), -2, "m"));
		filedelete(folderName + "d_reestr_" + delPeriod + ".txt");
		filedelete(folderName + "d_rinok_" + delPeriod + ".txt");
		filedelete(folderName + "d_shop_" + delPeriod + ".txt");
		filedelete(folderName + "d_perexid_" + delPeriod + ".txt");
		filedelete(folderName + "BLTA_" + delPeriod + ".txt");
		filedelete(folderName + "BLTB_" + delPeriod + ".txt");
		filedelete(folderName + "BLTm_" + delPeriod + ".txt");
		filedelete(folderName + "BLTBm_" + delPeriod + ".txt");
		filedelete(folderName + "products.csdb");
	end;
	
		
	
	
	//This only syncs the data files. Syncing the app itself (getting new versions) is done in the CSEntry menu system
	function syncHQ()

		if syncconnect(CSWeb, "http://csweb.ukrstat.gov.ua/csweb/api") = 1 then	
		//if syncconnect(Dropbox) then	//For debugging
		
			// Sync main data file.
			numeric syncRes = syncdata(PUT, CPI_DICT);
			
			//First sync the common files
			syncres = syncfile(GET, "/CPI/Lookup/prodNumber_Coicop3.txt", "../Lookup/prodNumber_Coicop3.txt");
			syncres = syncfile(GET, "/CPI/Lookup/prodNumber_Monitor.txt", "../Lookup/prodNumber_Monitor.txt");
			syncres = syncfile(GET, "/CPI/Lookup/Coicop_lvl3.csdb", "../Lookup/Coicop_lvl3.csdb");
			
			string tmpMistoName = replace(bstrip(theMistoName),  " ", "_");
			tmpMistoName = replace(bstrip(tmpMistoName),  " ", "_");
						
			string serverPath = "/CPI/Lookup/" + bstrip(theMisto) + "_" + tmpMistoName  + "/";
			string tabletPath = "../Lookup/" + bstrip(theMisto) + "_" + tmpMistoName  + "/";
			
			string aDate = edit("99999999", dateadd(sysdate("YYYYMMDD"), -1, "m"));
			string MMYY = aDate[5:2] + aDate[3:2];
			
			
			syncRes = syncfile(GET, serverPath + "BLTA_" + MMYY + ".txt",  tabletPath + "BLTA_" + MMYY + ".txt");
			syncRes = syncfile(GET, serverPath + "BLTB_" + MMYY + ".txt",  tabletPath + "BLTB_" + MMYY + ".txt");
			syncRes = syncfile(GET, serverPath + "BLTm_" + MMYY + ".txt",  tabletPath + "BLTm_" + MMYY + ".txt");
			syncRes = syncfile(GET, serverPath + "BLTBm_" + MMYY + ".txt",  tabletPath + "BLTBm_" + MMYY + ".txt");
			syncRes = syncfile(GET, serverPath + "d_reestr_" + MMYY + ".txt", tabletPath + "d_reestr_" + MMYY + ".txt");			
			syncRes = syncfile(GET, serverPath + "d_rinok_" + MMYY + ".txt", tabletPath + "d_rinok_" + MMYY + ".txt");
			syncRes = syncfile(GET, serverPath + "d_shop_" + MMYY + ".txt", tabletPath + "d_shop_" + MMYY + ".txt");
			syncRes = syncfile(GET, serverPath + "d_perexid_" + MMYY + ".txt", tabletPath + "d_perexid_" + MMYY + ".txt");
									
			
			syncdisconnect();
		else
			errmsg(tr(101));
		endif;
	
	end;


//Getting the product groups to make it easier to navigate in the shops
function get3LevelCoicops()
	file fileH;
	numeric ok = fileH.open(lvl3CoicopFile); 
	if not ok then
		errmsg(tr(104), lvl3CoicopFile);
		reenter;
	else
		list string Lines;
		ok = fileH.read(Lines); 

		numeric fileIdx = 1; 	//As the file starts at line 1 while the arrays are indexed from
		numeric j = 0, i = 0;	//zero, I use different varibles not to confuse myself.
		
		while fileIdx <= Lines.length() do
			string aLine = Lines(fileIdx);
			numeric Xpos = pos("	", aLine);
			lvl3Coicop(i, j) = aLine[1:XPos-1];	//first is "from" prod number
			aLine = aLine[Xpos+1];
			inc(j);
			Xpos = pos("	", aLine);
			lvl3Coicop(i, j) = aLine[1:XPos-1];	//"to" prod number
			aLine = aLine[Xpos+1];
			inc(j);
			Xpos = pos("	", aLine);
			lvl3Coicop(i, j) = aLine[1:XPos-1];	//Coicop
			aLine = aLine[Xpos+1];
			inc(j);
			Xpos = pos("	", aLine);
			lvl3Coicop(i, j) = aLine[1:XPos-1];	//Description
			ok = fileH.read(aLine); //fileread(fileH, aLine);
			inc(fileIdx);
			inc(i);
			j = 0;
		enddo;
		fileH.close(); 
	endif;
end;



//Getting the product numbers of the monitoring survey
function getMonitorProd()
	file fileH;
	numeric ok = fileH.open(monitorProdsFile); 
	
	if not ok then
		errmsg(tr(104), monitorProdsFile);
		reenter;
	else
		list string Lines;
		ok = fileH.read(Lines); 

		numeric fileIdx = 1; 	//As the file starts at line 1 while the arrays are indexed from
		numeric i = 0;	//zero, I use different varibles not to confuse myself.
		
		while fileIdx <= Lines.length() do
			string aLine = Lines(fileIdx);
			numeric Xpos = pos("	", aLine);
			prodMonitor(i, 1) = aLine[1:XPos-1];	//prodnumber
			prodMonitor(i, 2) = aLine[XPos+1];	//Description
			ok = fileH.read(aLine); //fileread(fileH, aLine);
			inc(fileIdx);
			inc(i);
			enddo;
		fileH.close(); 		
	endif;	
end;


//Read the blta/bltb files into a cspro database. Also create the database products that is
//used to fill the roster in the cpi_app
// parameters:
//theChar: "a", "b", "ma" or "mb" according to what file to read
//theProducts: list of products that this price collector is responsible for
//the shops: list of shops that the price collector is responsible for
function readBltFile(string theChar, list theProducts, list theShops);
	file bltHandler;
	
	//reading the file containing lvl3 COICOPs and the monitor prod numbers
	//get3LevelCoicops();
	//getMonitorProd();
	
	//Then reading last month's price info
	numeric ok;
	if theChar = "a" then
		ok = setfile(bltHandler, bltaFile);
	elseif theChar = "b" then
		ok = setfile(bltHandler, bltbFile);
	elseif theChar = "ma" then
		ok = setfile(bltHandler, bltmaFile);
	else //TheChar = "mb"
		ok = setfile(bltHandler, bltmbFile);	
	endif;
	
	
	if not ok then
		errmsg(tr(104), bltaFile);
		reenter;
	else
		string bltLine;
		ok = fileRead(bltHandler, bltLine);
		
		while ok do
			numeric posX = pos("	", bltLine);
			numeric TIP = toNumber(bltLine[1:posX-1]);
			//getting rid of bad data
			if TIP in MISSING, NOTAPPL, DEFAULT then
				//errmsg("Bad line: %s", bltLine);
				ok = fileread(bltHandler, bltLine);
				next;
			endif;
			
			
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			string tmpREESR = bltLine[1:posX-1];	//Interviewer
			if bstrip(tmpREESR) <> bstrip(theEnumerator) then	//Not the right interviewer
				ok = fileread(bltHandler, bltLine);
				next;
			endif;
			
			//Loop through the shops
			numeric idx = 1;
			numeric found = 0;
			numeric cnt = theShops.length();
			while idx <= cnt do
				if posChar(edit("ZZZZZZZZZZZZ", theShops(idx)), bltLine) <> 0 then	//Right shop
					found = 1;
					break;
				endif;
				inc(idx);
			enddo;
			
			if found = 0 then	//Not the right shop
				ok = fileread(bltHandler, bltLine);
				next;
			endif;	
			
			
			//Reading more of the line to get to the product number (NSTR)
			numeric REESR = toNumber(tmpREESR);
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric REG = toNumber(bltLine[1:posX-1]);
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric MIS = toNumber(bltLine[1:posX-1]);
			
			//if MIS is not last month, I don't want it
			string aDate = edit("99999999", dateadd(sysdate("YYYYMMDD"), -1, "m"));
			if MIS <> toNumber(aDate[5:2]) then
				ok = fileread(bltHandler, bltLine);
				next;
			endif;

			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric RIK = toNumber(bltLine[1:posX-1]);
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric NSTR = toNumber(bltLine[1:posX-1]);
			
			//Check if it is the right product
			idx = 1;
			found = 0;
			cnt = theProducts.length();
			while idx <= cnt do
				if NSTR <> theProducts(idx) then
					found = 1;
					break;
				endif;
				inc(idx);
			enddo;
			
			if found = 0 then	//Not the right product for this interviewer
				ok = fileread(bltHandler, bltLine);
				next;
			endif;	
			
			//Finalising reading the line and saving to the csdatabase
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric ZKPO = toNumber(bltLine[1:posX-1]);
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric DEN = toNumber(bltLine[1:posX-1]);
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			string HAR = bltLine[1:posX-1];
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric OBJEM = toNumber(bltLine[1:posX-1]);
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric CINAUP = toNumber(bltLine[1:posX-1]);
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric CINA = toNumber(bltLine[1:posX-1]);
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			numeric PNS = toNumber(bltLine[1:posX-1]);
			bltLine = bltLine[posX+1];
			posX = pos("	", bltLine);
			string OVSC = bltLine[1:posX-1];
  		    bltLine = bltLine[posX+1];
			string PRICHINA;
			if theChar = "a" or theChar = "b" then
				posX = pos("	", bltLine);
				PRICHINA = bltLine[1:posX-1];
			else
				PRICHINA = "";
			endif;
			
			//bltLine = bltLine[posX+1];
			//posX = pos("	", bltLine);
			
			ok = fileread(bltHandler, bltLine);
			
			//Adding to the product_dict as well
			P_MISTO = visualValue(M_MISTO_NO);
			P_SHOP = ZKPO;
			P_PRODUCT = NSTR;
			P_SUBID = PNS;	//Not sure that this variable actually is the correct one
			numeric i = 0;
			if theChar in "a", "b" then //No COICOP for monitoring survey
				while i < 90 do
					if toNumber(lvl3Coicop(i,0)) <= NSTR and toNumber(lvl3Coicop(i,1)) >= NSTR then
						//This is the right coicop code for product					
						P_COICOP = lvl3Coicop(i,2); 
						P_COICOP_DESC = lvl3Coicop(i,3);
						break;
					endif;
					inc(i);
				enddo;
			else
				P_COICOP = "";
				P_COICOP_DESC = "";
			endif;
			
			P_PROD_DESC = HAR;
			P_UNIT = OBJEM;
			P_PRICE = CINAUP;
			
			if theChar = "a" then
				P_SHOP_TYPE = 1;
			elseif theChar = "b" then
				P_SHOP_TYPE = 2;
			elseif theChar = "ma" then
				P_SHOP_TYPE = 3;
			else	// theChar = "mb" 
				P_SHOP_TYPE = 4;
			endif;
								
			writecase(PRODUCTS_DICT);
		enddo;	
		close(bltHandler);
	endif;
end;		



	//writes the pff file to start up an(other) app
	//parameters:
	//appName: "CPI_APP" or "menu"	
	//startmode: modify if data collection has started in this shop, add otherwise
	function writeDataEntryPff(string appName, string startMode)
		string language = getlanguage();

		//Create pff file
		string pffString;
		pffString = "[Run Information]\n";
		pffString = pffString + "Version=CSPro 7.5\n";
		pffString = pffString + "AppType=Entry\n";
		pffString = pffString + "Description=" + tr(106) + "\n\n";

		pffString = pffString + "[DataEntryInit]\n";
		pffString = pffString + "Interactive=Ask\n";
		pffString = pffString + "StartMode=" + startMode + "\n";
		pffString = pffString + "AutoAdd=Yes\n\n";
		
		if appName = "CPI" then
			pffString = pffString + "ShowInApplicationListing=Never\n\n";
		endif;

		pffString = pffString + "[Files]\n";
		if appName = "CPI" then
			pffString = pffString + "Application=.\CPI.ent\n";
			pffString = pffString + "InputData=..\Data\CPIData.csdb|CSPRODB\n\n";
		else
			pffString = pffString + "Application=.\menu.ent\n";
			pffString = pffString + "InputData=|type=None\n\n";
		endif;
				
		string tmpMistoName = replace(theMistoName,  " ", "_");
		tmpMistoName = replace(tmpMistoName,  " ", "_");

		pffString = pffString + "[ExternalFiles]\n";
		if appName = "CPI" then
			pffString = pffString + "COICOPLVL3_DICT=..\Lookup\Coicop_lvl3.csdb|CSPRODB\n";
			pffString = pffString + "PRODUCTS_DICT=..\Lookup\\" + theMisto + "_" + tmpMistoName + "\\products.csdb|CSPRODB\n\n";
		else
			//pffString = pffString + "BLTA_DICT=..\Lookup\\" + theMisto + "_" + tmpMistoName + "\\blta.csdb\n";
			//pffString = pffString + "BLTB_DICT=..\Lookup\\" + theMisto + "_" + tmpMistoName + "\\bltb.csdb\n";
			pffString = pffString + "CPI_DICT=..\Data\CPIData.csdb\n";
			pffString = pffString + "PRODUCTS_DICT=..\Lookup\\" + theMisto + "_" + tmpMistoName + "\\products.csdb\n\n";
		endif;
		
		pffString = pffString + "[UserFiles]\n";
		pffString = pffString + "LFFILE=\n\n";
		
		pffString = pffString + "[Parameters]\n";
		pffString = pffString + "Language=" + getLanguage() + "\n";
		if appName = "CPI" then
			pffString = pffString + "OBLAST=" + theMisto[1:2] + "\n";
			pffString = pffString + "MISTO=" + theMisto + "\n";
			pffString = pffString + "MISTO_NAME=" +  theMistoName + "\n";
			pffString = pffString + "ENUMERATOR=" + theEnumerator + "\n";
			pffString = pffString + "SHOP=" + edit("ZZZZZZZZZZZZ", visualValue(M_SHOP)) + "\n";
			pffString = pffString + "SHOPTYPE=" + edit("9", M_SHOP_OR_MARKED) + "\n";
			pffString = pffString + "SHOPNAME=" + M_SHOP_NAME + "\n";
			pffString = pffString + "OnExit=..\Menu\Menu.pff\n";
		endif;
		
		file lfFile;
		numeric ok;
		if appName = "CPI" then
			ok = setFile(lfFile, pffFile, create);			
		else
			ok = setFile(lfFile, ".\menu.pff", create);
		endif;
		ok = filewrite(lfFile, pffString);
		close(lfFile);

		if not ok then
			errmsg(tr(102));
		endif;
			
	end;


//*************************** PROCEDURES **********************************************

PROC MENU_FF


PROC MENU_QUEST
preproc
	
	savesetting("CSEntry.Menu.ShowCaseTree", "No"); //preventing the case tree to be shown
	savesetting("Setting.ShowCaseTreeInOverlay", "No");
	string aDate = edit("99999999", dateadd(sysdate("YYYYMMDD"), -1, "m"));
	
	prevPeriod = aDate[5:2] + aDate[3:2];
	lastMonth = tonumber(aDate[5:2]);
	lastMonthsYear = toNumber(aDate[3:2]);
	aDate = edit("99999999", sysdate("YYYYMMDD"));	
	currPeriod  = aDate[5:2] + aDate[3:2];
	//errmsg("Curr: %s, prev: %s", currPeriod, prevPeriod);
	
	 
	
PROC THEMENU
preproc
	$ = NOTAPPL;
	
postproc
	if $ = 1 or $ = 4 then	//Starting price app or showing schedule. NP: The latter is not fully implemented
		theOblast = loadsetting("Misto")[1:2];
		theMisto = loadsetting("Misto");
		theMistoName = bstrip(loadsetting("MistoName"));
		theEnumerator = bstrip(loadsetting("Enumerator"));
		
		if $ = 1 then
			skip to M_SHOP_OR_MARKED;
			
		else	//showing schedule
			if theEnumerator = "" then
				errmsg(tr(110));
				reenter;
			else
			
				string tmpMistoName = replace(theMistoName,  " ", "_");
				tmpMistoName = replace(tmpMistoName,  " ", "_");
				
				string folderName = "../Lookup/" + theMisto + "_" + tmpMistoName + "/";			
				string spreadSheetName = folderName + "reestr_" + bstrip(theEnumerator) + "_" + currPeriod + ".xlsx";
				if fileexist(spreadSheetName) then
					view(spreadSheetName);
				else
					errmsg(tr(111));
				endif;
				reenter;
			endif;
		endif;
	elseif $ in 2,3 then		//sync or create this months data
		//just continue to collect info on region and interviewer
		//and then call sync function or write pff to use for data entry
		//(Creation of data file with last month's prices will be done in the postproc of M_ENUMERATOR_SHOP (by calling the functions readBTLXfFile
		
	else
		stop(1); //Closes down the app
	endif;

	

PROC M_OBLAST_NO
preproc
	array theCodes(vsetMax);
	array String theLabels(vsetMax);
	file lfFile;
	numeric ok = setfile(lfFile, locationFileName);
	if not ok then
		errmsg(tr(104), locationFileName);
		stop(1);

	else
		numeric i = 0;
		while ok do
			string aLine;	
			ok = fileread(lfFile, aLine);
			
			if ok then
				//Reading state ID number and state name respectively and put it in arrays to use in value sets
				numeric posX = pos("	", aLine);
				if posX = 3 then
					//This is a oblast, not a misto, hence I'll put it in the arrays
					theCodes(i) = toNumber(aLine[1:posX-1]);
					theLabels(i) = aLine[posX+1];
					inc(i);
				endif;
			endif;
		enddo;
		
		close(lfFile);
		
		theCodes(i) = NOTAPPL;
		setValueset(M_OBLAST_NO, theCodes, theLabels);
	endif;

postproc
	theOblast = edit("99", $);
	


PROC M_MISTO_NO
preproc
	if theOblast = "80" then 	//Kiev. Doesn't need to find the misto
		theMisto = "80000";
		theMistoName = "м_Київ";
		M_MISTO_NO = toNumber(theMisto);
		M_MISTO_NAME = theMistoName;
		
		//have enough info to get monthly files, Fetch them with the sync function
		syncHQ();
		
		if THEMENU = 2 then	//sync.
			reenter THEMENU;
		else
			skip to M_ENUMERATOR_NO;
		endif;
	endif;
	
	array theCodes(vsetMax);
	array String thelabels(vsetMax);
	
	numeric i = 0;
	string aLine;
	file lfFile;
	numeric ok = setfile(lfFile, locationFileName);
	if not ok then
		errmsg(tr(104), locationFileName);
		stop(1);
	else
		i = 0;
		while ok do
			ok = fileread(lfFile, aLine);
			if ok then				
				if toNumber(aLine[1:2]) <> M_OBLAST_NO then
					next;
				else
					numeric posX = pos("	", aLine);
					if posX = 6 then	//Misto, not oblast						
						theCodes(i) = toNumber(aLine[1:posX-1]);
						theLabels(i) = aLine[posX+1];
						inc(i);							
					endif;
				endif;
			endif;
		enddo;
	endif;		
	
	close(lfFile);
	theCodes(i) = NOTAPPL;
	setValueset(M_MISTO_NO, theCodes, theLabels);


	
postproc
	//This postproc is only run if we're not in Kiev
	//Setting the name of the area, as it comes in handy in the data processing state
	i = 0;
	do while i <= vsetMax
		if M_MISTO_NO = theCodes(i) then
			M_MISTO_NAME = theLabels(i);
			theMisto = edit("99999", $);
			theMistoName = bstrip(M_MISTO_NAME);			
			break;
		endif;
		inc(i);
	enddo;
	
	//have enough info to get monthly files, Fetch them with the sync function
	syncHQ();
		
	if THEMENU = 2 then	//sync.
		reenter THEMENU;
	else
		//Normal flow
	endif;
	

PROC M_ENUMERATOR_NO
preproc
	//Finally setting the file names the file names
	getFileNames();
	
	//delete old files
	deleteFiles();
			
	numeric i = 0;
	string aLine, bLine;
	array intCodes(vsetMax);
	array String intNames(vsetMax);
	file enumFile, prodFile;
	
	numeric ok = setfile(enumFile, enumeratorFileName);
		
	if ok = 0 then
		errmsg(tr(104), enumeratorFileName, enumeratorProductsFileName);
		stop(1);
	else
		i = 0;
		ok = fileread(enumFile, aLine);
		
		while ok do			
			numeric posX = pos("	", aLine);
			numeric intnumb = toNumber(aLine[1:posX-1]);
			if posX > 1 then	
				//Check if there are products registered on this enumerator
				numeric ok1 = setfile(prodFile, enumeratorProductsFileName);
				ok1 = fileRead(prodFile, bLine);
				while ok1 do
						
					numeric posY = pos("	", bLine);
					numeric prodintNumb = toNumber(bLine[1:posY-1]);
					bLine = bLine[posY+1];
					posY = pos("	", bLine);
					numeric type = toNumber(bLine[1:posY-1]);
					
					if intNumb = prodintNumb and type = 1 then
						intCodes(i) = IntNumb;
						intNames(i) = aLine[posX+1];
						inc(i);
						break;
					endif;
					ok1 = fileRead(prodFile, bLine);
				enddo;
				close(prodFile);
			endif;
			ok = fileread(enumFile, aLine);
		enddo;
	endif;		
	
	close(enumFile);
	intCodes(i) = NOTAPPL;
	setValueset(M_ENUMERATOR_NO, intCodes, intNames);
	

//This postprocs prepares the data for this chosen enumerator	
postproc
	theEnumerator = edit("ZZZ", $);
	
	//First get the list of product types he is responsible for
	list products;
	file pfile;
	ok = setFile(pfile, enumeratorProductsFileName);
	ok = fileread(pfile, aLine);
	while ok do
		numeric posX = pos("	", aLine);
		if bstrip(theEnumerator) <> bstrip(aLine[1:posX-1]) then	//Not relevant product number for this enumerator
			ok = fileRead(pfile, aLine);
			next;
		else
			//Relevant product number for this enumerator. The product is the last column
			aLine = aLine[posX+1];
			posX = pos("	", aLine);
			numeric type = toNumber(aLine[1:posX-1]);	//Questionnaire type 1= price collection, 3 = monitoring
			if type = 1 or type = 3 then					
				products.add(toNumber(aLine[posX+1]));
			endif;
		endif;
		ok = fileRead(pfile, aLine);
	enddo;
	
	close(pFile);
	//errmsg("Finished finding the products. number: %d. First one: %d", products.length(), products(1));
	
	//And the shops and markets 
	list shops;
	ok = setFile(pfile, shopsFileName);
	numeric ctr = 1;
	while ctr < 3 do	//Looping first through shops and then through markets 
						//(we use the same shops and markets for price collection and monitoring
		ok = fileread(pfile, aLine);
		while ok do
			numeric posX = pos("	", aLine);
			numeric aShop = toNumber(aLine[1:posX-1]);
		
			aLine = aLine[posX+1];
			posX = pos("	", aLine);
			aLine = aLine[posX+1];
			posX = pos("	", aLine);
			string aShopName = aLine[1:posX-1];
			
			if aShopName <> "" then
			
				aLine = aLine[posX+1];
				posX = pos("	", aLine);
		
				//aLine = aLine[posX+1];
				//posX = pos("	", aLine);
			
				//First interviewer here. Looping through the rest of them. Up to 10 I think
				while posX > 0 do
					numeric anInt = toNumber(aLine[1:posX-1]);
					//errmsg("%d = %d?", anInt, $);
					if anInt = $ then
						shops.add(aShop);
					endif;
					aLine = aLine[posX+1];
					posX = pos("	", aLine);
				enddo;
			endif;
			ok = fileRead(pfile, aLine);
		enddo;
		close(pfile);
		
		ok = setFile(pfile, markedsFileName); //Gonna loop one more time, so this is OK: getting markets too
		inc(ctr);
	enddo;
	
	
	//also create last months price file as cspro dataset
	
	ok = setFile(PRODUCTS_DICT, productsDb, create); //open(PRODUCTS_DICT, create);
	get3LevelCoicops();
	getMonitorProd();
	readBltFile("a", products, shops);
	readBltFile("b", products, shops);
	readBltFile("ma", products, shops);
	readBltFile("mb", products, shops);
	
	numeric numOfPrices = countcases(PRODUCTS_DICT);
	if numOfPrices = 0 then
		errmsg(tr(109));
	else
		errmsg(tr(105), numOfPrices);
	endif;
	
	//Also set the variables
	
	savesetting("Misto", edit("99999", visualValue(M_MISTO_NO))); //Only need to set misto - not oblast, as I know the first 2 digits is oblast
	savesetting("MistoName", strip(M_MISTO_NAME));
	savesetting("Enumerator", edit("ZZZ", visualValue(M_ENUMERATOR_NO)));
	writeDataEntryPff("menu","add");
	THEMENU = NOTAPPL;
	reenter THEMENU;



PROC M_SHOP
preproc
	array shopCodes(vsetMax);
	array string shopLabels(vsetMax);
	getFileNames();

	string aLine;
	file shopFile;
	numeric ok;
	string theFileName;
	if M_SHOP_OR_MARKED in 1,3 then	//shop
		theFileName = shopsFileName;
	else
		theFileName = markedsFileName;
	endif;
	
	//Put the shops in a hashmap to be able to sort them by geographic code
	//before putting them in the value set
	hashmap string shops;
		
	ok = shopFile.open(theFileName);
	if not ok then
		errmsg(tr(104), theFileName);
		stop(1);
	else
		
		ok = shopFile.read(aLine);
		while ok do
			
			//First search for the right enumerator
			numeric posX = pos("	", aLine); 
			
			string aShopCode = aLine[1:posX-1];			//This will be overwritten in next iteration if the 
														//interviewer is not assigned to this shop
			aLine = aLine[posX+1];
			posX = pos("	", aLine);			
			string aShopName = aLine[1:posX-1];
			aLine = aLine[posX+1];
			
			//Next field I don't need. Always 0
			posX = pos("	", aLine);
			aLine = aLine[posX+1];
			
			//And the rest of the line is interviewer IDs
			posX = pos("	", aLine);
			
			while posX <> 0 do
				string anEnum = aLine[1:posx-1];				
				if anEnum = theEnumerator then	//The shop is valid for the enumerator					
					if aShopName <> "" then
						shops(aShopName) = aShopCode;
						//errmsg("added: %s, anEnum: %s, theLine: %s", aShopName, anEnum, tmp);						
						break;	
					endif;
				endif;
				aLine = aLine[posX+1];
				posX = pos("	", aLine);
			enddo;
			ok = shopFile.read(aLine);
		enddo;
	endif;		
	
	
	
	shopFile.close();
	list string shopList;
	shops.getKeys(shopList);
	shopList.sort();
	
	numeric ctr = 1;
	while ctr <= shoplist.length() do		
		shopCodes(ctr-1) = toNumber(shops(shopList(ctr)));
		shopLabels(ctr-1) = shopList(ctr);
		inc(ctr);
	enddo;

	//adding an option to replace shop
	shopCodes(ctr-1) = 0;
	shopLabels(ctr-1) = tr(112);
	shopCodes(ctr) = NOTAPPL;
	numeric numOfShops = ctr-1;
	if numOfShops > 0 then
		setValueset(M_SHOP, shopCodes, shopLabels);
	else
		//There are no prices to collect for this interviewer
		errmsg(tr(108));
		reenter THEMENU;
	endif;
	



postproc
	//double checking that the shop actually has been selected..
	if $ = NOTAPPL or $ = DEFAULT then
		errmsg(tr(113));
		reenter;
	endif;
		
	//Check if unit is partly started
	OBLAST_NO = toNumber(loadsetting("Misto")[1:2]);
	MISTO_NO = toNumber(loadsetting("Misto"));
	ENUMERATOR_NO = toNumber(loadsetting("Enumerator"));
	SHOP = $;
	SHOP_TYPE = M_SHOP_OR_MARKED;
	CPI_YEAR = sysdate("YYYY");
	CPI_MONTH = sysdate("MM");
	
	//Also want the shop name.. It's just more convienient to have it in the data file
	numeric j = 0;
	string shopName;
	while j < ctr do
		if shopCodes(j) = $ then
			shopName = shopLabels(j);
			break;
		endif;
		inc(j);
	enddo;
	
	M_SHOP_NAME = shopName;
	
	//if monitoring survey, I want to check if there are products for this shop	
	if M_SHOP_OR_MARKED in 3,4 and countcases(PRODUCTS_DICT where P_SHOP_TYPE = M_SHOP_OR_MARKED and P_SHOP = M_SHOP) = 0 then
		//No monitoring products for this shop/market
		errmsg(tr(114));
		$ = notappl;
		reenter;
	else
		//Then checking if the shop has already been started
		ok = loadcase(CPI_DICT, OBLAST_NO, MISTO_NO, ENUMERATOR_NO, SHOP, SHOP_TYPE, CPI_YEAR, CPI_MONTH);
		string startMode;
		if ok then
			startmode = "modify;" + edit("99", OBLAST_NO) + edit("99999", MISTO_NO)
				+ edit("ZZZ", ENUMERATOR_NO) + edit("ZZZZZZZZZZZZ", SHOP) + edit("Z", SHOP_TYPE)
				+ edit("ZZZZ", CPI_YEAR) + edit("99", CPI_MONTH);
		else
			startMode = "add";
		endif;
		
		//write the data entry pff file
		writeDataEntryPff("CPI", startMode);
	
		if execpff(pffFile, stop) = notappl then
			errmsg(tr(102));
		endif;
		$ = notappl;
		THEMENU = notappl;
		reenter THEMENU;
	endif;

